{
  
    
        "post0": {
            "title": "Analyzing my Spotify listening history 🎵 - Part 1",
            "content": "I like to have everything in my life tracked in some way. Preferably, knowingly (Looking at you, Facebook), cause it allows you to analyze it and find interesting things (Might be related with becoming a data scientist)! I&#39;ve always been a fan of the features provided by Last.fm to track you listening behaviour across apps and platforms. It allows you to see stuff like your favorite artists per month, or your afinity with certain genres over time like in the image below. . . Buuuuuut, like Last.fm, most of these analyses are paid completely or partly. In the case of Last.fm, you get this plot for free but anything more will cost you some paper. I&#39;m kinda cheap, so let&#39;s see if we can do it ourselves! . I wanted to have my listening history, and currently there is an API call that provides that functionality. However, I wanted to do this at the start of 2019 (Yeah, I didn&#39;t get around to doing this until now 😅) and this wansn&#39;t available back then, or at least I couldn&#39;t find it. Spotify, like many other companies, has an option to download your personal information. Unfortunately, this data only contained data for three months (they upped it to a year now, which is great!). . But, given this limitation, the only way I could think of to get this was to ask Spotify for my personal data. Under the GDPR, they are required to provide this information, so I thought this had a good shot. Well, after e-mailing back and forth a whole bunch of times, eventually I got in touch with the Data Privacy Office and they provided me with my complete listening history! . So that&#39;s the data that we&#39;ll be working with. Like I said, I requested the data in early 2019, so my history goes from my beginning of Spotify (ca. 2013) untill then. So lets see what we&#39;re dealing with. . The Data &#10024; . I received one main file from spotify called EndSong.json which had json items as follows. In total, I got 39,229 songs played, which is quite a lot and definitely enough to do some interesting things with! . { &quot;ts&quot;:&quot;2013-10-09 20:03:57 UTC&quot;, &quot;username&quot;:&quot;xxxxxxxxxx&quot;, &quot;platform&quot;:&quot;xxxxxxx&quot;, &quot;ms_played&quot;:&quot;5969&quot;, &quot;conn_country&quot;:&quot;NL&quot;, &quot;ip_addr_decrypted&quot;:&quot;xx.xx.xx.xx&quot;, &quot;user_agent_decrypted&quot;: &quot;xxxxxxxxxxx&quot;, &quot;master_metadata_track_name&quot;:&quot;You Make Me&quot;, &quot;master_metadata_album_artist_name&quot;:&quot;Avicii&quot;, &quot;master_metadata_album_album_name&quot;:&quot;You Make Me&quot;, &quot;reason_start&quot;:&quot;click-row&quot;, &quot;reason_end&quot;:&quot;click-row&quot;, &quot;shuffle&quot;:false, &quot;skipped&quot;:false, &quot;offline&quot;:false, &quot;offline_timestamp&quot;:&quot;0&quot;, &quot;incognito_mode&quot;:false, &quot;metro_code&quot;:&quot;0&quot;, &quot;longitude&quot;:0, &quot;latitude&quot;:0 } . For our analysis, we&#39;re gonna use the ol&#39; trusty Pandas. The data is in the json-lines format, so we use the python json-lines package to read our data. We&#39;ll also drop some useless columns and convert the timestamp column to a python datetime object. Furthermore, we use the UTF-8 encoding while reading our data, to support tokens that would otherwise be malformed like the ë character. Lastly, we also create separate columns for many of our time attributes like year, month and day, since this makes it easy for filtering during plotting. . Tip: The json-lines format puts a json object on each separate line, and allows for very dense information packaging in json files. Before I knew this, I was reading the data as a string, converting true-&gt;True and false-&gt;False, to match python syntax and then using the ast package to interpret the string as a python object. That also worked ok, but this is much better. 😊 . lines = [] for i in json_lines.reader(open(&#39;data/EndSong.json&#39;, encoding=&#39;utf-8&#39;)): lines.append(i) df = pd.DataFrame(lines) . #collapse-hide df = df.drop([&#39;username&#39;, &#39;user_agent_decrypted&#39;, &#39;incognito_mode&#39;, &#39;platform&#39;, &#39;ip_addr_decrypted&#39;], axis=1) df.ts = pd.to_datetime(df.ts) df[&#39;date&#39;] = df.ts.dt.date df[&#39;year&#39;] = df.ts.dt.year df[&#39;month&#39;] = df.ts.dt.month df[&#39;day&#39;] = df.ts.dt.day df[&#39;dow&#39;] = df.ts.dt.dayofweek df[&#39;hour&#39;] = df.ts.dt.hour df.head(4) . . ts ms_played conn_country master_metadata_track_name master_metadata_album_artist_name master_metadata_album_album_name reason_start reason_end shuffle skipped ... city region episode_name episode_show_name date year month day dow hour . 0 2013-10-09 20:24:30+00:00 | 15010 | NL | Wild for the Night (feat. Skrillex &amp; Birdy Nam... | A$AP Rocky | LONG.LIVE.A$AP (Deluxe Version) | unknown | click-row | False | False | ... | NaN | NaN | NaN | NaN | 2013-10-09 | 2013 | 10 | 9 | 2 | 20 | . 1 2013-10-09 20:19:20+00:00 | 68139 | NL | Buzzin&#39; | OVERWERK | The Nthº | unknown | click-row | False | False | ... | NaN | NaN | NaN | NaN | 2013-10-09 | 2013 | 10 | 9 | 2 | 20 | . 2 2013-10-09 20:21:54+00:00 | 23643 | NL | Blue | Gemini | Blue EP | unknown | click-row | False | False | ... | NaN | NaN | NaN | NaN | 2013-10-09 | 2013 | 10 | 9 | 2 | 20 | . 3 2013-10-09 20:20:29+00:00 | 68063 | NL | Blue | Gemini | Blue EP | unknown | click-row | False | False | ... | NaN | NaN | NaN | NaN | 2013-10-09 | 2013 | 10 | 9 | 2 | 20 | . 4 rows × 25 columns . Yearly &amp; Monthly behaviour . One of the first things that might be interesting to see is how my usage of spotify has changed over the years. For this, we can easily plot the number of songs player by year and by month. . Note: All my plots will be created using Altair. This is mainly because fastpages has the best support for this. But, I have taken this opportunity to become really familiar with the nooks and crannies of Altair. My previous go-tos are and likely still will be for most: matplotlib and seaborn. . We&#39;re using the LA Times vega lite theme. We can set altair to use this with the following line. . alt.themes.enable(&#39;latimes&#39;) . ThemeRegistry.enable(&#39;latimes&#39;) . #collapse-hide t = ( df.ts.dt # Use the datetime attributes of the ts column .to_period(&#39;D&#39;) # Convert the ts column to a &#39;date&#39; period. So the timestamp is reduced to a date like &#39;28-2-2020&#39;. .value_counts() # Counts the frequency of all days (i.e. count how many songs were played that day). .to_timestamp() # The index is a RangeIndex after the `to_period`, so we convert it back to a datetime. .to_frame() # Altair wants dataframes, so we convert it to a dataframe. .reset_index() # Make the datetime index a separate column instead of the index. .rename(columns={&#39;index&#39;: &#39;date&#39;, &#39;ts&#39;: &#39;listens&#39;}) # Rename the columns to be descriptive ) yearly = alt.Chart(t).mark_bar(size=30).encode( alt.X(&#39;year(date):O&#39;, title=&#39;Year&#39;), alt.Y(&#39;sum(listens):Q&#39;, title=&#39;Listens&#39;), tooltip=[&#39;sum(listens)&#39;, &#39;year(date)&#39;] ).properties(width=MAXWIDTH/2) monthly = alt.Chart(t).mark_bar().encode( alt.X(&#39;yearmonth(date):O&#39;, title=&#39;Month&#39;), alt.Y(&#39;sum(listens):Q&#39;, title=&#39;Listens&#39;), tooltip=[&#39;sum(listens)&#39;, &#39;yearmonth(date)&#39;], ).properties(width=MAXWIDTH/2) # Altair allows really easy formatting, having horizontal concatenation with the | operator yearly | monthly . . In the plots above you see my total songs listened. It immediately becomes clear that I got my data in early 2019, given the drop in 2019 and lack of data in 2020. But what is interesting is the steady increasing line the previous years. It shows that I slowly started using spotify more and more. The start coincides with when I started paying for Spotify as well, which is not very surprising (Yay for no ads and song selection 🤗). . When looking at the number of songs per month, we can still see a decline in listening activity since the spike at October 2018. The peak that ranges from September 2018 to November 2018 can be explained by me starting a new internship where I was playing spotify while working the whole day. In October my total songs listened more than doubled compared to only two months earlier (1615 to 3273 songs played). . Furthermore, we can see that I also used Spotify for a short while in 2016, but stopped using it again for about a year. Then I picked it up again in 2017 and never stopped using it afterwards. . Daily behaviour . Well, I&#39;m already learning a lot about Altair, cause creating this plot in its current form easily took three hours. Altair does not like it when you aggregate a value in several places. But the result is also quite a nice visual. I plotted the daily distribution per hours per year. Now, the value is the sum of the whole year, so it&#39;s no wonder that the differences are really similar to what we say in the yearly distribution. More interesting would be the percentage per hour per year, which would tell me something about my listening behaviour throughout the years. . The yearly visuals only show 2016 till 2019, because the others years don&#39;t have enough data. . There are several noteworthy things: . In 2016, there was a big spike between 13:00 and 14:00. 2016 is split between my third and fourth year at university, of which in the fourth year I also was on the board of the e-sports association. I just barely didn&#39;t have enough credits to get my bachelor&#39;s degree in my third year, so my fourth year was pretty empty. The combination likely contributed to many days where I had lunch and then closed myself of with music, to work on association matters. | In 2016, there is a big spike at 9:00. This makes sense, because that was always the time I was cycling to my university. Over the years, I started listening to podcasts more, which is why you can see the 9:00 value decline over 4 years. | In 2018 and 2019, my listening during evening hours decreased quite significantly. Earlier, I had a spike at 22:00 but this completely faded during the first month of 2019. What happened? Not sure, to be frank. It might be that I had more nights planned with friends? | In 2017 and 2018, I somehow play 4% of my music daily before 7:00. Now, this is essentially impossible since I almost never get up before 7. I&#39;m not sure why this is shown to be the case. . Tip: I&#8217;ve since learned that you can so things like define variables and aggregate values in Altair. An example can be found on their website. However, did not go back and redo the analyses using that. That&#8217;s for another time. 😉 | Genres . Now that we have some insight into my listening behaviour, we can analyze what I listen to a bit more closely. For example, what genres do I listen to most and how do these change? Here we get a bit closer to the visualization we got from Last.fm. . However, before we can do that, we need to get the genres associated with our songs. This was not included in the data Spotify sent over, so we need to use their API to get this information. Spotify does not apply categories per song, but rather per artist. Internally, Spotify uses special URIs to indicate different concepts like artists, songs and albums. For example, a track can be indicated with spotify:track:6rqhFgbbKwnb9MLmUQDhG6. . These URIs refer to a specific object, whereas the artist in the data I received does not. So we need to use the Spotify search function to retrieve the correct Spotify object of an artist, and then we can retrieve the genres from there. Now, either the data they sent is somewhat corrupted or their music management is a bit lackluster, because there were still quite some artists without an Spotify URI and/or without any defined genres. The latter makes sense, since this takes a lot of work by spotify. . You can see the API calls and retrieval loop used in the two collapsed cells below. . #collapse-hide SPOTIFY_API_KEY = os.getenv(&#39;SPOTIFY_API_KEY&#39;) SPOTIFY_CLIENT_ID = os.getenv(&#39;SPOTIFY_CLIENT_ID&#39;) spotify_search_url = &#39;https://api.spotify.com/v1/search?q={q}&amp;type={type}&#39; spotify_headers = {&quot;Accept&quot;: &quot;application/json&quot;, &quot;Authorization&quot;:&quot;Bearer &quot; + SPOTIFY_API_KEY, &quot;Content-Type&quot;: &quot;application/json&quot;} client_credentials_manager = SpotifyClientCredentials(SPOTIFY_CLIENT_ID, SPOTIFY_API_KEY) spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager) . . #collapse-hide artist_ids = [] genres = [] for artist in tqdm(df.master_metadata_album_artist_name): try: response = spotify.search(artist, type=&#39;artist&#39;) artist_id = response.get(&#39;artists&#39;).get(&#39;items&#39;)[0].get(&#39;uri&#39;) artist_genres = response.get(&#39;artists&#39;).get(&#39;items&#39;)[0].get(&#39;genres&#39;) except Exception as e: print(e) print(response) artist_id = &#39;&#39; artist_genres = [] genres.append(artist_genres) artist_ids.append(artist_id) print(len(artist_ids), len(genres)) genres_df = pd.DataFrame(genres) artist_ids_df = pd.DataFrame(artist_ids) . . Let&#39;s have a short look at the data. . 0 1 2 3 4 5 6 7 8 9 ... 11 12 13 14 15 16 17 18 19 20 . 0 east coast hip hop | hip hop | pop | pop rap | rap | trap music | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 catstep | complextro | edm | electro house | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 rows × 21 columns . Because we added all genres for each artist as a new column, we have quite a wide dataframe. The artist with the most genres has 21(!) genres. Let&#39;s see who that is. . comb = pd.concat([df, genres_df], axis=1) comb.loc[~(comb[&#39;20&#39;].isna())] . ts ms_played conn_country master_metadata_track_name master_metadata_album_artist_name master_metadata_album_album_name reason_start reason_end shuffle skipped ... 11 12 13 14 15 16 17 18 19 20 . 32948 2018-10-26 21:01:59+00:00 | 255626 | NL | Grounded | Pavement | Crooked Rain Crooked Rain | clickrow | trackdone | False | NaN | ... | indie pop | indie rock | lo-fi | modern rock | new wave | noise pop | noise rock | post-punk | rock | slow core | . 1 rows × 46 columns . It&#39;s some artist called Pavement! I&#39;ve no idea who that is, but still interesting to see. The artist seems to be in the indie rock segment, where there are many subgenres, so it&#39;s not that surprising. I&#39;ve heard that metal has a similar amount of subgenres, so it would be cool to do this analysis for a metal fan 🤘. . But, clearly I am not in that segment. Lets see how many genres an average artist of mine has. We&#39;ll exclude artists with zero genres. . If we take the percentage of the artists with three or less genres, we see this is 52%. This is quite high, and means many people are pretty specific with regards to what genres they fall into for Spotify. We see quite a long tail distribution, with only 27% having more than 5 genres specified and only 2.8% more then 10 genres! . Unfortunately, this blog was getting way too long, so I split in in several parts. Please read part 2 (and 3?) as well! . In conclusion . We have done a pretty thorough analyses of my listening history on Spotify. We evaluated the high level listening behaviour on a monthly and yearly basis. We have also seen my daily listening behaviour and how it has changed throughout the years. We also started on the analysis of the genres, which we will continue in part 2. . Topics covered in part 2: . What are my top genres? | Correlation between genres. | How have my genres changed over time? | Recreation of the Last.fm image. | Learnings . This blogpost has been a huge learning experience for me. It was my first time using Fastpages. It was my first time writing a blogpost in a jupyter notebook as well, and it was also my first time using Altair! All of those experiences were quite positive, and I especially like getting more familiar with Altair. Having a Grammar of Graphics tool in your toolbelt is an extremely valuable thing in the world of data science, although you might not use it on a daily basis. . If you liked this blogpost, don&#39;t hesitate to reach out to me on linkedin or twitter . .",
            "url": "https://www.baukebrenninkmeijer.nl/analysis/music/bi/2020/07/31/spotify-listening-history-analysis-part-1.html",
            "relUrl": "/analysis/music/bi/2020/07/31/spotify-listening-history-analysis-part-1.html",
            "date": " • Jul 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Automated product recognition for hospitality industry insights 🍻",
            "content": "We’re all a bit too familiar with membership cards of supermarket chains, like Walmart or Albert Heijn, the largest supermarket chain in the Netherlands. Besides the advantages these cards have for the consumer, they have a lot more advantages for the supermarket chains. They apply advanced data science techniques to the data gathered with these cards to figure out where to put products in the store, what products to put next to each other and what products to put on sale together. . For 6 months I interned at TAPP, a company that tries to bring the same insights to the hospitality industry. Because there are no membership cards for bars (in most cases), we do this by analyzing the products on receipts. Because of the inconsistent offerings at venues, TAPP focuses almost exclusively on drinks, due to the clearly branded single units used. Doing this gives us a very detailed view of the market for drinks, allowing us to see, for example, market shares and revenues for specific sodas, liquors and beers. . Every consumption we receive is connected to a product. Before we can use products in our analysis, a product needs to be ‘tagged’. This tagging means we need to specify what a product is, because the description on a receipt is not enough for insights. A description might be ‘Hot choco’, and to use this for our analysis we need to specialize our five tag levels, which are group, category, subcategory, type and brand. This is also the hierarchical order, so a category has zero or more subcategories which has in turn zero or more types. I purposely omit group because the group tag consists of the values ‘Drinks’, ‘Food’ and ‘Other’, and we only have categories for ‘Drinks’, because of our focus. The hierarchy is visualized in the image below. . . Sounds great, so whats the problem? . Well, a product is identified by the unique combination of the venue, the description and the price. This means a coke in small, medium and large are three different products at a single venue. And this goes for every venue. This means that when connecting with a new venue, we get somewhere between 300 and 2000 new products. These all need to be tagged, which was up until now all done manually. You can image this is a very slow, error-prone process. . And this is where the fun begins. Because this is a very well suited case for some good ol’ machine learning. The goal is to substitute the human labour in the tagging process by a machine learning model. In the image below you can see the data we are working with. Variables that are useful for classification are the description and the unit price. We start of without any of the tags and want to end with them filled in. Because sometimes we just don’t have enough information for some tag, the model also has to be able to predict empty values. This is also visible in the images below, where the brand is left empty because the description ‘koffie’ (coffee) does not give us enough information to fill this. . . . Because the hierarchical structure of our tags holds a lot information, the best approach seemed to classify each tag separately, starting at the top with group and working our way down to brand. This way, lower level tags can use the higher level tag information for their predictions. . There is now way around getting a bit technical, so if that is not your thing you can skip to the results. . Approach . There are two parts to solve this problem. First, we need a model that is capable of reliably predicting these tags. Second, we need to implement this model in our current AWS based infrastructure. . General . Due to our data diversity, this is quite a complex problem. There is natural language processing (NLP) involved in handling the descriptions, as well as our tags. The tags can be regarded as either text or categorical variables (but we’ll see soon this doesn’t matter). The price is fairly simple, and we’ll just take the normalized price as input. Because we have different types of input, I opted to use a model with multiple inputs. I was most comfortable with Keras, and their functional API supports multiple inputs, so I chose this for implementation. Also, because we are tagging each layer separately, there will be a ‘different’ model for each layers. I’m putting different in quotation marks because the model architecture will be the same, but the weights will be different. . When there is NLP involved, two things are generally going to happen. . Tokenize the words (‘Cola’ -&gt; [23]) . | Use word embeddings ([23] -&gt; [0.3, -0.8, 0.7, 0.4, 0.1]) . | The tokenization required some creativity, because the descriptions need to be split on a space, whereas the tags should not (e.g. ‘Mineral Water’ is one tag). So two tokenizers are used. The problem is that both tokenizers use (partially) the same range of number, meaning that ‘drinks’ and ‘Choco’ can have the same token (unique number). This will be talked about more below. . Word embeddings . There are many different approaches to the word embeddings. There are very recent and advanced representations like BERT and ELMo and a little bit older representations like GloVe and Word2Vec. We can use these pretrained weights, but because our vocabulary has a very slim overlap with normal English, this probably does not improve our result much if any. So I decided to train the embedding layer myself, and with almost 150k descriptions, we can get pretty good representations. In Keras, word embeddings are implemented by creating a fixed size random vector, which is then optimized by training. This vector captures no information about context or position, meaning a lot of information is lost. But because we are doing classification, which doesn’t require these things, this is not a big problem. . One thing to consider about these vectors is that some recent implementations of categorical variables are doing the exact same thing, most notably the authors of Fast.ai. A value is converted to a fixed size vector, to give the value a richer representation, which is then optimized by training. Now, Keras doesn’t have this categorical variable specific approach, but we can just use the same embeddings al the sentences. Because in this case, the representations are the same. To visualize the difference, look at the image below. Here, you can clearly see that the word2vec embeddings capture semantic similarities between sentence b and c, whereas the embeddings trained from scratch to not. . . RNN or CNN? . I opted to try two approaches. Because there is NLP involved, using a recurrent neural network (RNN) with LSTM layers seems like a good idea. All the current state of the art language processing is done using recurrent network with LSTM layers. LSTM layers have, simply said, a memory which they can use to remember was words it has seen previously. This gives them the capacity to find word relations that are close together but also further away and makes them very powerful for language processing. . The duplicate token problem I raised earlier really hurts the LSTM performance, because it is very confusing. I solved this by creating a separate input for the tags. So the double tokens still exist, but they are never seen together. I also created a separate input for the price, where no embedding was needed. The result is a network with three inputs, one for the description, one for the parent tags and one for the price. The description and tags both go into a embedding layer and an LSTM layer. The result is the following network. . . Because our texts are very short, I also wanted to try a convolutional neural network (CNN). Whereas LSTMs are very good for finding relations between words further apart, convolutional layers are very good at finding word structures closer together. Combined with pooling layers we can even detect certain structures in sentences. The same goes for the ‘categorical’ values of the tags. CNNs are already very well known from computer vision, where they have been the state-of-the-art for multiple years. . The duplicate token problem is much less of a problem with the convolutional approach, because the context of a word matters more than the word itself. The odds of finding the same structures with the same tokens in both the tags and the descriptions is marginal with a vocabulary of 16000 words for the descriptions and the 1300 tag combinations. So, if this is not a problem, the tags and descriptions can just be concatenated when doing convolutions. This approach also has the capacity to see certain relations between tags and description. The result is a model with only two inputs. . . Implementation . At TAPP we use two services primarily for our data pipeline: AWS and Airflow. Airflow is a great, open source and free tool to manage data pipelines and the ETL process. If you want to know more about Airflow, I recommend this article. . Every part of our infrastructure lives inside a docker **container. Using ECS, we can easily manage our services and it allows us to quickly **scale up and down, depending on our needs. Additionally, moving our infrastructure to different environments is relatively easy, for example a local development environment. . Predicting or training this model are in our system batch operations, which need a lot of compute power for a short time. For this reason, I opted to implement them using AWS Batch. AWS Batch only supports jobs as docker containers, which is nice because we are already working with those. These jobs are ran by an Airflow DAG which schedules the job using the BatchOperator. This model was the first neural network that was implemented which had one big problem: there was no existing infrastructure for using GPUs. Using a GPU on AWS batch requires a couple of things. . An EC2 instance with a GPU. I opted to use a p2.xlarge instance, which is on of the cheapest GPU instances and features an Nvidia Telsa K80. . | This process requires a GPU enabled Amazon Machine Image (AMI), which are the virtual machines Amazon uses for their instances. Now, there are a couple of GPU enabled AMIs around, most notably the Deep Learning AMIs of Amazon itself, which feature a whole range of preinstalled deep learning libraries. Because we are using docker to run our batches, we do not care about the preinstalled deep learning libraries, but rather much more about the installed CUDA and Nvidia Drivers, that allow us to do GPU operations. . | To run GPU operations in docker, one needs to set the docker runtime to ‘nvidia’. To do this by default, we need to edit the AMI and save it as a custom AMI. We can then use this custom AMI for our AWS compute environment. . | Create an AWS Job Queue. . | Create an AWS Compute Environment with the custom AMI, which handles jobs from the job queue. . | After this is all done, we find ourselves a nice docker image which has the required CUDA libraries and Nvidia drivers installed, along with our desired python version (3.6.x). This actually took some time, because the official TensorFlow images are all python 3.5 (or 2.7, but our codebase is in python 3). The images I settled on was Deepo, by the user Ufoym. Using this in its python 3.6 variant with GPU support worked wonderfully, and required a us to only set environment variables and install some additional python packages during building. Requiring little additional software kept the build time and CI/CD pipeline speed to a reasonable level as well. . In this scenario, training the network really needed a GPU. However, the predictions can be done on just a CPU. This is great, because for that we don’t need the custom AMI and separate EC2 instance. We still do the predictions using Batch, but run them on the same machines we already had available. . Model persistence between training and predictions is done using S3. After training, the weights and tokenizers are uploaded to S3, which are then downloaded before doing predictions. . Results . Both approaches to the problem worked fairly well, but it turned out the convolutional approach outperformed the recurrent approach by multiple percents in some tasks. In the table below the results are compared and it is clear that the convolutional approach outperforms the recurrent approach by significant margins in the group, type and brand tasks. The increase in brand recognition is especially impressive, with over 4% higher accuracy and an error reduction of 48.5%. With higher accuracy in every task and lower convergence time, the convolutional approach is clearly the stronger candidate for this task. Due to the short descriptions and semantically categorical values of the tags, the natural language capacities of the LSTM cannot flourish. . Results of both approaches next to each other. The columns indicate the accuracy for that specific task. It’s clear the convolutional approach has higher accuracy with lower convergence time. . Lastly, the data had big effects on the results. During my time at TAPP, the manual tagging continued, some labels were added, some removed, some relationships were changed. Combined with the human error that was present in the manually tagged products, this has a significant effect on the results. The categorization is still not completely finalized around aggregate products with descriptions like ‘open bar’ and combined products, like cocktails or mixers like Jack and Coke. These products are tagged as two separate products, where one has the other as a parent product. Whether the child product’s group is tagged as drinks or others is still a point of discussion. The same goes for product notes, like extra sauce on fries which are also tagged as a separate product, and where the same discussion is present but for whether it should be food *or *other. The (partial) automation of this tagging, paired with removed errors from the dataset should increase the model performance even more, and I think it is very feasible to get to 99% accuracy in some tasks, but the humans need to figure out how to perform this task before the machines can learn from it. . Because these results are not good enough to replace humans, I implemented a way to interact with the model using the old tagging process. Previously, a table extract is made, sent to the taggers, tagged, sent back and then re-uploaded to our data warehouse. The best way to implement the model is between the extraction and sending to the taggers. In the extracted file, there are columns added for each tag with the model’s prediction and its confidence. If the model is very sure (above 0.99 confidence) the prediction is already filled into the column the human taggers are going to fill. If the confidence is lower, the prediction can be regarded as a recommendation for the taggers. The result of this is as follows, where I removed the other tags for simplicity. Because the confidence is higher than 0.99, the prediction is already filled into the tag. Otherwise, tag_Group would be empty . . Future Work . Sadly, I was not able to do everything I wanted. Among these are ideas that only recently occurred to me, when it was too late to do in-depth experiments. Even though I said earlier using pretrained weights would likely not yield much improvements, it should be checked out to confirm my hypotheses. . Additionally, in my convolutional approach I used only one convolution layer. To bridge some of the distance gap that is present using convolutional layers it might be very fruitful to add more convolutional layers with pooling in between. This way, higher order sentence structures or relations between tags and words can become apparent that are currently lost. . Curious? . If you would like to know more about this project, please comment or send me a message on LinkedIn or hit me up on twitter. .",
            "url": "https://www.baukebrenninkmeijer.nl/nlp/internship/2020/07/24/automated-product-recognition-for-hospitality-industry-insights.html",
            "relUrl": "/nlp/internship/2020/07/24/automated-product-recognition-for-hospitality-industry-insights.html",
            "date": " • Jul 24, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Introduction to personal website",
            "content": "Introduction to personal website . Welcome! . . After fighting with setting up a custom domain, I’ve not officially set out to write about some interesting topics here. The main challenge for me, by length, will be to work towards rounding something of within a limited amount of time. I always get sucked into diving way too deep into a topic, to a point where I’m not knowledgeable enough anymore to understand, and then I lose interest :sweat_smile:. This time will definitely be different! . What do I want to do here? I’d like to write about interesting stuff I find online, discover or think of! Yes, very original :). What does this mean, concretely? . I’m going to talk about: . Deep learnig | Machine learning | Reinforcement Learning | Natural language processing | Computer Vision | Whatever else I find interesting. I can do what I want, mom! | . Current impediments for realizing my dreams: . How do you use latex here? $ lambda$, does this work? | Finding some good topics. | . Thanks and hope to see you! . :+1: .",
            "url": "https://www.baukebrenninkmeijer.nl/introduction/2020/07/23/first-personal-post.html",
            "relUrl": "/introduction/2020/07/23/first-personal-post.html",
            "date": " • Jul 23, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://www.baukebrenninkmeijer.nl/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About me",
          "content": "Hi there, I’m Bauke 👋 . I’m a deep learning practitioner🧠/data scientist📈. I have a background in computer science and data science, and thus both are very prevelant in my work. I have created some bots, some deep learning implementations and some libraries related to synthetic data. . 🔭 I’m currently working on setting up a personal website and synthetic data using GANs. | 🌱 I’m currently learning Full Stack (Deep/machine) Learning | 💬 Ask me about PyTorch and SOTA NLP or Computer Vision models! 🔥🔥 | 😊 My favorite machine learning sources are HuggingFace, Sotabench and paperswithcode | . . This browser does not support PDFs. Please download the PDF to view it: Download PDF. . &lt;/embed&gt;",
          "url": "https://www.baukebrenninkmeijer.nl/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.baukebrenninkmeijer.nl/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}